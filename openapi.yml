openapi: 3.0.2
info:
  title: API Restaurant
  version: "1.0"
  description: This is the service the manages the restaurant data in the app GoOutSafe
servers:
  - url: "https://api.prova/"
    variables: {}
    description: The first server used for the definition of APIs
paths:
  /restaurants:
    post:
      x-openapi-router-controller: microservice.api.restaurants
      summary: "Register a new restaurant"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseRestaurant"
      responses:
        "201":
          description: "Created"
        "409":
          description: "Already Exist"
      tags:
        - "Restaurant"
    get:
      x-openapi-router-controller: microservice.api.restaurants
      summary: "Get all restaurants registered in the app"
      parameters:
        - name: operator_id
          in: query
          required: false
          description: The id of the operator
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/operator_id"
        - name: id
          in: query
          required: false
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/id"
        - name: lat
          in: query
          required: false
          description: The latitude of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/lat"
        - name: lon
          in: query
          required: false
          description: The longitude of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/lon"
        - name: phone
          in: query
          required: false
          description: The phone number of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/phone"
        - name: time_of_stay
          in: query
          required: false
          description: The amount of time (minutes) normally spent for a booking in the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/time_of_stay"
        - name: cuisine_type
          in: query
          required: false
          description: The cuisine type of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/cuisine_type"
        - name: opening_hours
          in: query
          required: false
          description: The opening hours of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/opening_hours"
        - name: closing_hours
          in: query
          required: false
          description: The closing hours of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/closing_hours"
        - name: average_rating
          in: query
          required: false
          description: The average_rating of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/average_rating"
        - name: q
          in: query
          required: false
          description: Query for elastic search 
          schema:
            type:
              string
        - name: page
          in: query
          required: false
          description: Number of page
          schema:
            type:
              integer
        - name: perpage
          in: query
          required: false
          description: Number of restaurants per page
          schema:
            type:
              integer
      responses:
        "200":
          description: "List of the restaurants"
          content:
            application/json:
              schema:
                items:
                $ref: "#/components/schemas/FullRestaurant"
      tags: 
        - "Restaurant"

  /restaurants/{id}:
    get:
      x-openapi-router-controller: microservice.api.restaurants
      summary: "Get a restaurant specified by Id"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/id"
      responses:
        "200":
          description: "Attributes of the restaurant"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullRestaurant"
        "404":
          description: "Restaurant not found"
      tags:
        - "Restaurant"
    patch:
      x-openapi-router-controller: microservice.api.restaurants
      summary: "Modify average rating of the restaurant"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                average_rating:
                  type: number
                  example:
                    3.7
      responses:
        "204":
          description: "Resource updated"
        "404":
          description: "Restaurant not found"
      tags:
        - "Restaurant"

  /restaurants/{id}/upload:
    post:
      x-openapi-router-controller: microservice.api.restaurants
      operationId: upload
      summary: "Upload photos for the restaurant specified by Id"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/BaseRestaurant/properties/id"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: "Uploaded"
        "404":
          description: "Restaurant not found"
      tags:
        - Restaurant

  /tables:
    post:
      x-openapi-router-controller: microservice.api.tables
      summary: "Register a new table"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
      responses:
        "201":
          description: "Created"
        "409":
          description: "Already Exist"
      tags:
        - "Table"
    get:
      x-openapi-router-controller: microservice.api.tables
      summary: "Get all the tables the app"
      parameters:
        - name: restaurant_id
          in: query
          required: false
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/Table/properties/restaurant_id"
        - name: name
          in: query
          required: false
          description: The name of the table
          schema:
            $ref: "#/components/schemas/Table/properties/name"
        - name: seats
          in: query
          required: false
          description: The minimum seats required
          schema:
            $ref: "#/components/schemas/Table/properties/seats"
      responses:
        "200":
          description: "The list of tables associated to a restaurant"
          content:
            application/json:
              schema:
                items:
                $ref: "#/components/schemas/Table"
      tags:
        - "Table"

  /tables/{id}:
    get:
      x-openapi-router-controller: microservice.api.tables
      summary: "Get the table specified by id"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the table
          schema:
            $ref: "#/components/schemas/Table/properties/id"
      responses:
        "200":
          description: "The table specified by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
              example: { "restaurant_id": 5, "name": "A7", "seats": 10 }
        "404":
          description: "Table not found"
      tags:
        - "Table"
    patch:
      x-openapi-router-controller: microservice.api.tables
      operationId: patch
      summary: "Edit the attributes of the table"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the table
          schema:
            $ref: "#/components/schemas/Table/properties/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example:
                    "A10"
                seats:
                  type: integer
                  example:
                    7
      responses:
        "204":
          description: "Resource updated"
        "404":
          description: "Table not found"
        "400":
          description: "A table with the same name already exists"
      tags:
        - "Table"
    delete:
      x-openapi-router-controller: microservice.api.tables
      summary: "Delete the table"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the table
          schema:
            $ref: "#/components/schemas/Table/properties/id"
      responses:
        "204":
          description: "Table deleted"
        "404":
          description: "Table not found"
      tags:
        - "Table"

  /menus:
    post:
      x-openapi-router-controller: microservice.api.menus
      summary: "Register a new menu"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
      responses:
        "201":
          description: "Created"
        "409":
          description: "Already Exist"
      tags:
        - "Menu"
    get:
      x-openapi-router-controller: microservice.api.menus
      summary: "Get all menus registered in the app"
      parameters:
        - name: id
          in: query
          required: false
          description: The id of the menu
          schema:
            $ref: "#/components/schemas/Menu/properties/id"
        - name: name
          in: query
          required: false
          description: The name of the menu
          schema:
            $ref: "#/components/schemas/Menu/properties/name"
        - name: restaurant_id
          in: query
          required: false
          description: The Id of the restaurant
          schema:
            $ref: "#/components/schemas/Menu/properties/restaurant_id"
      responses:
        "200":
          description: "List of the restaurants"
          content:
            application/json:
              schema:
                items:
                $ref: "#/components/schemas/FullRestaurant"
      tags:
        - "Menu"

  /menus/{id}:
    get:
      x-openapi-router-controller: microservice.api.menus
      summary: "Get the menu specified by id"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the menu
          schema:
            $ref: "#/components/schemas/Menu/properties/id"
      responses:
        "200":
          description: "The menu specified by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "404":
          description: "Menu not found"
      tags:
        - "Menu"

  /reviews:
    post:
      x-openapi-router-controller: microservice.api.reviews
      summary: "Insert a new review"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: "Created"
        "409":
          description: "Already exists"
        "404":
          description: "Restaurant not found"
      tags:
        - "Review"
    get:
      x-openapi-router-controller: microservice.api.reviews
      summary: "Get all the reviews the app"
      parameters:
        - name: id
          in: query
          required: false
          description: The id of the review
          schema:
            $ref: "#/components/schemas/Review/properties/id"
        - name: rating
          in: query
          required: false
          description: The rating of the review
          schema:
            $ref: "#/components/schemas/Review/properties/rating"
        - name: restaurant_id
          in: query
          required: false
          description: The id of the restaurant
          schema:
            $ref: "#/components/schemas/Review/properties/restaurant_id"
        - name: user_id
          in: query
          required: false
          description: The Id of the user that has written the review
          schema:
            $ref: "#/components/schemas/Review/properties/user_id"
      responses:
        "200":
          description: "List of reviews for a particular restaurant"
          content:
            application/json:
              schema:
                items:
                $ref: "#/components/schemas/Review"
              example:
                [
                  { "id": 5, "message": "Fantastic", "rating": 4 },
                  { "id": 7, "message": "Super", "rating": 5 },
                ]
      tags:
        - "Review"


components:
  schemas:
    BaseRestaurant:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier"
          readOnly: true
          example: 5
        name:
          type: string
          description: "The name of the restaurant"
          maxLength: 128
          example: "Trattoria da Gino"
        lat:
          type: number
          description: "The latitude of the restaurant"
          example: 64.36
        lon:
          type: number
          description: "The longitude of the restaurant"
          example: 85.24
        phone:
          type: string
          description: "The phone number of the restaurant"
          maxLength: 128
          example: "+39 561256145"
        time_of_stay:
          type: integer
          description: "The amount of time (minutes) normally spent for a booking in the restaurant"
          example: 180
          enum: [30, 90, 180]
        cuisine_type:
          type: string
          description: "The cuisine type of the restaurant"
          enum: [ETHNIC, FAST_FOOD, PUB]
          example: "ETHNIC"
        opening_hours:
          type: integer
          description: "The opening hours of the restaurant"
          example: 10
        closing_hours:
          type: integer
          description: "The closing hours of the restaurant"
          example: 24
        operator_id:
          type: integer
          description: "Id of the operator that owns the restaurant"
          example: 6
        average_rating:
          type: number
          description: "Average rating of the restaurant"
          example: 3.7
        precautions:
          type: array
          items:
            type: string
          description: "List of precautions"
          example: ["Amuchina", "Social distancing"]
    FullRestaurant:
      allOf:     
        - $ref: '#/components/schemas/BaseRestaurant'
        - type: object
          properties:
            tables:
              type: array
              items:
                $ref: '#/components/schemas/Table'
              description: "List of restaurant tables"
            menus:
              type: array
              items:
                $ref: '#/components/schemas/Menu'
              description: "List of restaurant menus"
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'
              description: "List of restaurant reviews"
    Table:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier"
          readOnly: true
          example: 5
        name:
          type: string
          description: "Name of the table"
          example: "A10"
        seats:
          type: integer
          description: "Maximum number of seats for the table"
          example: 10
        restaurant_id:
          type: integer
          description: "Id of the restaurant associated to the table"
          example: 5
    Menu:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 1
        name:
          type: string
          description: "Name of the menu"
          maxLength: 128
          example: "Trial Menu"
        foods:
          type: array
          items:
            type: object
          description: "List of foods"
          example:
            [
              {
                "category": "STARTERS",
                "name": "Pepperoni pizza",
                "price": 5.60,
              },
            ]
        restaurant_id:
          type: integer
          description: "Id of the restaurant that is associated to the menu"
          example: 5
    Food:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 1
        category:
          type: string
          description: "Food category"
          enum:
            [
              "STARTERS",
              "MAIN_COURSES",
              "SIDE_DISHES",
              "DESSERTS",
              "DRINKS",
              "PIZZAS",
              "BURGERS",
              "SANDWICHES",
            ]
        name:
          type: string
          description: "Name of the food"
          example: "Pepperoni pizza"
        price:
          type: number
          description: "Price of the dish"
          example: 5.50
    Review:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 1
        rating:
          type: integer
          description: "Rating of the restaurant"
          enum: [1, 2, 3, 4, 5]
          example: 4
        message:
          type: string
          description: "Description of the user experience with the restaurant"
          example: "Fantastic"
        restaurant_id:
          type: integer
          description: "Id of the restaurant associated to the review"
          example: 5
        user_id:
          type: integer
          description: "Id of the user that have written the review"
          example: 11
